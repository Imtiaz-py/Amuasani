import pygame, sys
import numpy as np
from pygame.constants import KEYDOWN                    
pygame.init() 

WIDTH = 600
HEIGHT = 600
LINE_WIDTH = 15
BOARD_ROWS = 3
BOARD_COLS = 3
CIRCLE_RADIUS = 60
CIRCLE_WIDTH = 15
CROSS_WIDTH = 25 
CORNER_SPACE = 55 

WHITE = ( 255, 255, 255 )
BLUE = ( 0, 0, 255 )
CIRCLE_COLOR = ( 255, 0, 0 )
CROSS_COLOR = ( 0, 255, 0 )
BG_COLOR = ( 0, 0, 0 )
LINE_COLOR = ( 0, 0, 255 )
game_screen = pygame.display.set_mode((WIDTH, HEIGHT))
pygame.display.set_caption('Amuasani')               #In here I am adding a title for the game and also adding a background color.
game_screen.fill(BG_COLOR)


Board = np.zeros((BOARD_ROWS, BOARD_COLS))



def draw_lines():
    pygame.draw.line(game_screen, LINE_COLOR, (0, 200), (600, 200), LINE_WIDTH)      #In here I wrote a piece of code to draw two horizontal lines.
    pygame.draw.line(game_screen, LINE_COLOR, (0, 400), (600, 400), LINE_WIDTH)

    pygame.draw.line(game_screen, LINE_COLOR, (200, 0), (200, 600), LINE_WIDTH)      #In here I wrote a piece of code to draw two vertical lines.
    pygame.draw.line(game_screen, LINE_COLOR, (400, 0), (400, 600), LINE_WIDTH)



def making_figures():                              #In here I wrote a piece of code to draw the cross mark and circle mark and also to decide who is going to draw player 1/player2.
    for row in range(BOARD_ROWS):
        for col in range(BOARD_COLS):
            if Board[row][col] == 1:        #this line means that player 1 has marked on the board
                pygame.draw.circle( game_screen, CIRCLE_COLOR, (int(col * 200 + 100 ), int(row * 200 + 100)), CIRCLE_RADIUS, CIRCLE_WIDTH )                 #In here we are telling the function to draw a circle in the axes/axis. 
            elif Board[row][col] == 2:
                pygame.draw.line( game_screen, CROSS_COLOR, (col * 200 + CORNER_SPACE, row * 200 + 200 - CORNER_SPACE), (col * 200 + 200 - CORNER_SPACE, row * 200 + CORNER_SPACE), CROSS_WIDTH )
                pygame.draw.line( game_screen, CROSS_COLOR, (col * 200 + CORNER_SPACE, row * 200 + CORNER_SPACE), (col * 200 + 200 - CORNER_SPACE, row * 200 + 200 - CORNER_SPACE), CROSS_WIDTH )

def mark_square(row, col, player):        #With this piece of code the player can mark anywhere on the board.
    Board[row][col] = player


def empty_square(row, col):            #In here I wrote a piece of a code to check if there are any available square or not.
    if Board[row][col] == 0:
        return True
    else:
        return False


def Board_full():                   #In I wrote a piece of code to check if the board is full or not.
    for row in range(BOARD_ROWS):
        for col in range(BOARD_COLS):
            if Board[row][col] == 0: 
                return False
    
    return True


def win_check(player):               # In here I wrote a code that checks how a user wins and also to restart the app if needed.
    for col in range(BOARD_COLS):
        if Board[0][col] == player and Board[1][col] == player and Board[2][col] == player:       #This piece of code is to check if the player wins vertically. 
            vertical_win_line(col, player)
            return True 

    for row in range(BOARD_ROWS):
        if Board[row][0] == player and Board[row][1] == player and Board[row][2] == player:       #This piece of code here is to check if the player wins horizontally.
            horizontal_win_line(row, player)
            return True   

    if Board[2][0] == player and Board[1][1] == player and Board[0][2] == player:                #This piece of code here is to check if player wins diagonally.
        diagonal_line(player)
        return True


    if Board[0][0] == player and Board[1][1] == player and Board[2][2] == player:
        second_diagonal_line(player)
        return True    

    return False              #This line here is written so that if player doesn't win from any of the above so it will return False.
    
def vertical_win_line(col, player):
    positionX = col * 200 + 100                          #200 here is the square size 100 is square's half

    if player == 1:
        color = WHITE
    elif player == 2:
        color = WHITE
    pygame.draw.line( game_screen, color, ( positionX, 15 ), ( positionX, HEIGHT - 15 ), 15 )
    

def horizontal_win_line(row, player):
    positionY = row * 200 + 100                          #200 here is the square size 100 is square's half

    if player == 1:
        color = WHITE
    elif player == 2:
        color = WHITE
    pygame.draw.line( game_screen, color, ( 15, positionY ), ( WIDTH - 15, positionY ), 15)
    

def diagonal_line(player):
    if player == 1:
        color = WHITE
    elif player == 2:
        color = WHITE
    pygame.draw.line( game_screen, color, ( 15, HEIGHT - 15 ), ( WIDTH - 15, 15 ), 15)
  

def second_diagonal_line(player):
    if player == 1:
        color = WHITE
    elif player == 2:
        color = WHITE
    pygame.draw.line( game_screen, color, ( 15, 15 ), ( WIDTH - 15, HEIGHT - 15 ), 15)
    

def restart():
    game_screen.fill( BG_COLOR )                 #With this piece of code here the players can restart the game.
    draw_lines()
    player = 1 
    for row in range(BOARD_ROWS):
        for col in range(BOARD_COLS):
            Board[row][col] = 0

draw_lines()


player = 1 
End_Game = False

#creating a main loop to make the game_screen stay until we close it.

while True:
    for event in pygame.event.get():
        if event.type == pygame.QUIT:     #So here we wrote a code while the screen is on/True then we let the screen stay until we close it ourself.
            sys.exit()
        

        if event.type == pygame.MOUSEBUTTONDOWN and not End_Game:   #I wrote this code to execute this code when someone tries to input a circle or a cross.
            mouseX = event.pos[0]
            mouseY = event.pos[1]
            clicked_row = int(mouseY // 200)
            clicked_col = int(mouseX // 200)

            if empty_square( clicked_row, clicked_col ):           #In here I am writing a code that allows two players to click on the board.
                mark_square( clicked_row, clicked_col, player )
                if win_check( player ):
                    End_Game = True
                player = player % 2 + 1    
                
                
                making_figures()

        if event.type == pygame.KEYDOWN:
            if event.key == pygame.K_r:               #I wrote this piece of code here to to choose with which button/key can the player restart with.
                restart()
                End_Game = False
               
            


    pygame.display.update()

